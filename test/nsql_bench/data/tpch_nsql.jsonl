{"category": "basic SQL", "level": "basic", "input": "find part brand for part with key 3. Fields: part_brand", "ideal": "{\"part_brand\": \"Brand#42\"}", "sql": "select p_brand from part where p_partkey = 3;"}
{"category": "aggregation functions", "level": "basic", "input": "what is total number of orders. Fields: total_orders", "ideal": "{\"total_orders\": 1500000}", "sql": "select count(*) as total_orders from orders;"}
{"category": "single join", "level": "basic", "input": "what is customer Customer#000000001 nation. Fields: nation", "ideal": "{\"nation\": \"MOROCCO\"}", "sql": "select n_name as nation from customer c, nation n where c.c_name = 'Customer#000000001' and c.c_nationkey = n.n_nationkey;"}
{"category": "single join, aggregation functions", "level": "basic", "input": "how many customers reside in each nation. Return top 3 ordered by nation name. Fields: nation_name, customer_count", "ideal": "[{\"nation_name\":\"ALGERIA\",\"customer_count\":5925},{\"nation_name\":\"ARGENTINA\",\"customer_count\":5975},{\"nation_name\":\"BRAZIL\",\"customer_count\":5999}]", "sql": "select n.n_name as nation_name, count(*) as customer_count from customer c, nation n where c.c_nationkey = n.n_nationkey group by n.n_name order by n.n_name limit 3;"}
{"category": "basic SQL", "level": "basic", "input": "find part retail price for part key 10. Fields: retailprice", "ideal": "{\"retailprice\": 910.01 }", "sql": "select p_retailprice from part where p_partkey = 10;"}
{"category": "aggregation functions", "level": "basic", "input": "what is the total number of suppliers. Fields: total_suppliers", "ideal": "{\"total_suppliers\": 10000}", "sql": "select count(*) as total_suppliers from supplier;"}
{"category": "single join", "level": "basic", "input": "which supplier supplies part key 500. Fields: supplier_name", "ideal": "[{\"supplier_name\": \"Supplier#000000501\"}, {\"supplier_name\": \"Supplier#000003001\"}, {\"supplier_name\": \"Supplier#000005501\"}, {\"supplier_name\": \"Supplier#000008001\"}]", "sql": "SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey WHERE ps_partkey = 500;"}
{"category": "single join, aggregation functions", "level": "basic", "input": "what is the total order price for customer Customer#000000005. Fields: customer_name, total_price", "ideal": "{\"customer_name\": \"Customer#000000005\", \"total_price\": 684965.28}", "sql": "SELECT c.c_name, SUM(o.o_totalprice) AS total_price FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey WHERE c.c_name = 'Customer#000000005' GROUP BY c.c_name;"}
{"category": "aggregation functions", "level": "basic", "input": "what is the average retail price of all parts. Fields: average_retail_price", "ideal": "{\"average_retail_price\": 1499.496}", "sql": "SELECT AVG(p_retailprice) AS average_retail_price FROM part;"}
{"category": "basic SQL", "level": "basic", "input": "what is the most expensive part. Return part name and price. Fields: part_name, retail_price", "ideal": "{\"part_name\": \"goldenrod drab brown salmon mint\", \"retail_price\": 2098.99}", "sql": "SELECT p_name, p_retailprice FROM part ORDER BY p_retailprice DESC LIMIT 1;"}
{"category": "aggregation functions", "level": "Intermediate", "input": "What are the total and average quantities, total and average prices, total and average discounts, and the count of orders from the lineitem table, grouped by return flag and status for items shipped on or before September 2, 1998.", "ideal": "[{\"l_returnflag\": \"A\", \"l_linestatus\": \"F\", \"order_count\": 1478493, \"total_quantity\": 37734107.00, \"average_quantity\": 25.522006, \"total_price\": 56586554400.73, \"average_price\": 38273.129735, \"total_discount\": 73902.91, \"average_discount\": 0.049985}, {\"l_returnflag\": \"N\", \"l_linestatus\": \"F\", \"order_count\": 38854, \"total_quantity\": 991417.00, \"average_quantity\": 25.516472, \"total_price\": 1487504710.38, \"average_price\": 38284.467761, \"total_discount\": 1946.33, \"average_discount\": 0.050093}, {\"l_returnflag\": \"N\", \"l_linestatus\": \"O\", \"order_count\": 2920374, \"total_quantity\": 74476040.00, \"average_quantity\": 25.502227, \"total_price\": 111701729697.74, \"average_price\": 38249.117989, \"total_discount\": 146008.73, \"average_discount\": 0.049997}, {\"l_returnflag\": \"R\", \"l_linestatus\": \"F\", \"order_count\": 1478870, \"total_quantity\": 37719753.00, \"average_quantity\": 25.505794, \"total_price\": 56568041380.90, \"average_price\": 38250.854626, \"total_discount\": 73957.41, \"average_discount\": 0.050009}]", "sql": "SELECT l_returnflag, l_linestatus, COUNT(*) AS order_count, SUM(l_quantity) AS total_quantity, AVG(l_quantity) AS average_quantity, SUM(l_extendedprice) AS total_price, AVG(l_extendedprice) AS average_price, SUM(l_discount) AS total_discount, AVG(l_discount) AS average_discount FROM lineitem WHERE l_shipdate <= '1998-09-02' GROUP BY l_returnflag, l_linestatus;"}
{"category": "string manipulations", "level": "basic", "input": "Concatenate part brand and part type for part key 20. Fields: brand_and_type", "ideal": "{\"brand_and_type\": \"Brand#12 LARGE POLISHED NICKEL\"}", "sql": "SELECT CONCAT(p_brand, ' - ', p_type) AS brand_and_type FROM part WHERE p_partkey = 20;"}
{"category": "string manipulations", "level": "basic", "input": "Convert the supplier name for supplier with key 1 to lowercase. Fields: supplier_name_lower", "ideal": "{\"supplier_name_lower\": \"supplier#000000001\"}", "sql": "SELECT LOWER(s_name) AS supplier_name_lower FROM supplier WHERE s_suppkey = 1;"}
{"category": "string manipulations", "level": "basic", "input": "Extract the customer name without 'customer#' prefix for customer with key 2. Fields: customer_name", "ideal": "{\"customer_name\": \"000000002\"}", "sql": "SELECT REPLACE(c_name, 'customer#', '') AS customer_name FROM customer WHERE c_custkey = 2;"}
{"category": "string manipulations", "level": "basic", "input": "Extract the first 4 characters of the customer name for customer with key 2. Fields: customer_name_prefix", "ideal": "{\"customer_name_prefix\": \"Cust\"}", "sql": "SELECT SUBSTRING(c_name, 1, 4) AS customer_name_prefix FROM customer WHERE c_custkey = 2;"}
{"category": "date and time", "level": "basic", "input": "Extract the year from the order date for order key 5. Fields: order_year", "ideal": "{\"order_year\": 1994}", "sql": "SELECT EXTRACT(YEAR FROM o_orderdate) AS order_year FROM orders WHERE o_orderkey = 5;"}
{"category": "date and time", "level": "basic", "input": "Calculate the difference in days between ship date and commit date for order key 5. Fields: days_difference", "ideal": "{\"days_difference\": 62}", "sql": "SELECT DATEDIFF(l_shipdate, l_commitdate) AS days_difference FROM lineitem WHERE l_orderkey = 5 LIMIT 1;"}
{"category": "single join, aggregation functions, date and time", "level": "advanced", "input": "Calculate revenue per order for orders placed before March 15, 1995 and shipped after March 15, 1995. Return the order key, order date, and ship priority, sorted by revenue descending and then order date. Limit the results to 3 rows.", "ideal": "[ { \"o_orderkey\": 4791171, \"o_orderdate\": \"1995-02-23\", \"o_shippriority\": 0, \"revenue\": 452497.4729 }, { \"o_orderkey\": 4163074, \"o_orderdate\": \"1995-02-13\", \"o_shippriority\": 0, \"revenue\": 437267.7799 }, { \"o_orderkey\": 2845094, \"o_orderdate\": \"1995-03-06\", \"o_shippriority\": 0, \"revenue\": 433962.5553 } ]", "sql": "SELECT o.o_orderkey, o.o_orderdate, o.o_shippriority, SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE o.o_orderdate < DATE '1995-03-15' AND l.l_shipdate > DATE '1995-03-15' GROUP BY o.o_orderkey, o.o_orderdate, o.o_shippriority ORDER BY revenue DESC, o.o_orderdate LIMIT 3;"}
{"category": "window functions (subqueries)", "level": "advanced", "input": "For the customer with name Customer#000000083, find the highest priced order using a subquery with a window function. Fields: customer_name, order_key, total_price", "ideal": "{\"customer_name\": \"Customer#000000083\", \"order_key\": 5864416, \"total_price\": 281527.77 }", "sql": "SELECT customer_name, order_key, total_price FROM ( SELECT c.c_name AS customer_name, o.o_orderkey AS order_key, o.o_totalprice AS total_price, ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY o.o_totalprice DESC) AS rn FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey ) sub WHERE rn = 1 AND customer_name = 'Customer#000000083';"}
{"category": "window functions (partitioning and ordering)", "level": "Intermediate", "input": "For supplier with name Supplier#000009421, rank the parts it supplies by supply cost using a window function in a subquery, then select the top 2 most expensive parts. Fields: supplier_name, part_key, supply_cost, rank", "ideal": "[{\"supplier_name\": \"Supplier#000000501\", \"part_key\": 500, \"supply_cost\": 50.00, \"rank\": 1}, ...]", "sql": "SELECT supplier_name, part_key, supply_cost, rnk FROM ( SELECT s.s_name AS supplier_name, ps.ps_partkey AS part_key, ps.ps_supplycost AS supply_cost, RANK() OVER (PARTITION BY s.s_suppkey ORDER BY ps.ps_supplycost DESC) AS rnk FROM partsupp ps JOIN supplier s ON ps.ps_suppkey = s.s_suppkey ) sub WHERE rnk <= 2 AND supplier_name = 'Supplier#000009421';"}
{"category": "window functions (partitioning and ordering)", "level": "Intermediate", "input": "For Customer#000096977, calculate the difference in total price between each order and its previous order using a window function. Return only the first 2 records ordered by order date. Fields: customer_name, order_key, order_date, total_price, price_difference", "ideal": "[ { \"customer_name\": \"Customer#000096977\", \"order_key\": 391744, \"order_date\": \"1992-11-30\", \"total_price\": 129115.13, \"price_difference\": null }, { \"customer_name\": \"Customer#000096977\", \"order_key\": 3599046, \"order_date\": \"1993-03-10\", \"total_price\": 242265.84, \"price_difference\": 129115.13 } ]", "sql": "SELECT customer_name, order_key, order_date, total_price, price_difference FROM ( SELECT c.c_name AS customer_name, o.o_orderkey AS order_key, o.o_orderdate AS order_date, o.o_totalprice AS total_price, LAG(o.o_totalprice) OVER (PARTITION BY c.c_custkey ORDER BY o.o_orderdate) AS price_difference FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey WHERE c.c_name = 'Customer#000096977' ) sub ORDER BY order_date LIMIT 2;"}
{"category": "window functions (partitioning and ordering)", "level": "Intermediate", "input": "For Customer#000000005, calculate the cumulative total price for orders using a window function. Return only the first 2 records ordered by order date. Fields: customer_name, order_key, order_date, total_price, cumulative_total", "ideal": "[ { \"customer_name\": \"Customer#000000005\", \"order_key\": 2630562, \"order_date\": \"1993-06-27\", \"total_price\": 324835.83, \"cumulative_total\": 324835.83 }, { \"customer_name\": \"Customer#000000005\", \"order_key\": 905633, \"order_date\": \"1995-07-05\", \"total_price\": 261338.66, \"cumulative_total\": 586174.49 } ]", "sql": "SELECT customer_name, order_key, order_date, total_price, cumulative_total FROM ( SELECT c.c_name AS customer_name, o.o_orderkey AS order_key, o.o_orderdate AS order_date, o.o_totalprice AS total_price, SUM(o.o_totalprice) OVER (PARTITION BY c.c_custkey ORDER BY o.o_orderdate) AS cumulative_total FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey WHERE c.c_name = 'Customer#000000005' ) sub ORDER BY order_date LIMIT 2;"}
{"category": "subqueries", "level": "Intermediate", "input": "Find first 2 customers ordered by name who placed an order with a total price above the overall average using a subquery. Fields: customer_name, order_key, total_price", "ideal": "[ { \"customer_name\": \"Customer#000000001\", \"order_key\": 5133509, \"total_price\": 174645.94 }, { \"customer_name\": \"Customer#000000002\", \"order_key\": 3986496, \"total_price\": 312692.22 } ]", "sql": "SELECT c.c_name AS customer_name, o.o_orderkey AS order_key, o.o_totalprice AS total_price FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey WHERE o.o_totalprice > (SELECT AVG(o.o_totalprice) FROM orders) ORDER BY c.c_name LIMIT 2;"}
{"category": "subqueries", "level": "Intermediate", "input": "List two suppliers with lowest account balance whose account balance is above the average for their nation using a subquery. Fields: supplier_name, acctbal", "ideal": "[ { \"supplier_name\": \"Supplier#000009139\", \"acctbal\": 4107.34 }, { \"supplier_name\": \"Supplier#000009534\", \"acctbal\": 14112.80 } ]", "sql": "SELECT s.s_name AS supplier_name, s.s_acctbal AS acctbal FROM supplier s WHERE s.s_acctbal > (SELECT AVG(s2.s_acctbal) FROM supplier s2 WHERE s2.s_nationkey = s.s_nationkey) ORDER BY s.s_acctbal ASC LIMIT 2;"}
{"category": "multiple joins", "level": "Intermediate", "input": "Find the total order price along with customer name and nation for orders. Return two with the highest order price. Fields: customer_name, nation, total_order_price", "ideal": "[ { \"customer_name\": \"Customer#000143500\", \"nation\": \"IRAN\", \"total_order_price\": 7012696.48 }, { \"customer_name\": \"Customer#000095257\", \"nation\": \"BRAZIL\", \"total_order_price\": 6563511.23 } ]", "sql": "SELECT c.c_name AS customer_name, n.n_name AS nation, SUM(o.o_totalprice) AS total_order_price FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey GROUP BY c.c_name, n.n_name ORDER BY total_order_price DESC LIMIT 2;"}
{"category": "multiple joins", "level": "Intermediate", "input": "Retrieve orders with corresponding customer name, supplier name, and supplier nation. Return the first two records ordered by order key and supplier nation. Fields: order_key, customer_name, supplier_name, supplier_nation", "ideal": "[ { \"order_key\": 1, \"customer_name\": \"Customer#000036901\", \"supplier_name\": \"Supplier#000003701\", \"supplier_nation\": \"ETHIOPIA\" }, { \"order_key\": 1, \"customer_name\": \"Customer#000036901\", \"supplier_name\": \"Supplier#000000638\", \"supplier_nation\": \"INDIA\" } ]", "sql": "SELECT o.o_orderkey AS order_key, c.c_name AS customer_name, s.s_name AS supplier_name, n.n_name AS supplier_nation FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey JOIN lineitem l ON o.o_orderkey = l.l_orderkey JOIN supplier s ON l.l_suppkey = s.s_suppkey JOIN nation n ON s.s_nationkey = n.n_nationkey ORDER BY o.o_orderkey, supplier_nation LIMIT 2;"}
{"category": "set operations", "level": "Intermediate", "input": "List all unique nations appearing in either customer or supplier records, ordered by nation name. Return the first 5 records. Fields: nation", "ideal": "[{\"nation\": \"ALGERIA\"}, {\"nation\": \"ARGENTINA\"}, {\"nation\": \"BRAZIL\"}, {\"nation\": \"CANADA\"}, {\"nation\": \"CHINA\"}]", "sql": "SELECT distinct nation FROM ( SELECT n_name AS nation FROM nation WHERE n_nationkey IN (SELECT c_nationkey FROM customer) UNION SELECT n_name AS nation FROM nation WHERE n_nationkey IN (SELECT s_nationkey FROM supplier) ) AS union_nations ORDER BY nation LIMIT 5;"}
{"category": "CTEs", "level": "Intermediate", "input": "Use CTE to combine customer and supplier nations, then select distinct nation names ordered by name. Return only three rows. Fields: nation_name", "ideal": "[{\"nation_name\": \"ALGERIA\"}, {\"nation_name\": \"ARGENTINA\"}, {\"nation_name\": \"BRAZIL\"}]", "sql": "WITH combined_nations AS ( SELECT n.n_name AS nation_name FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey UNION SELECT n.n_name AS nation_name FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey ) SELECT DISTINCT nation_name FROM combined_nations ORDER BY nation_name LIMIT 3;"}
{"category": "CTEs", "level": "Intermediate", "input": "Use CTE to select parts with a retail price above the average and then select part keys and retail prices ordered by part key. Return only three rows. Fields: part_key, retail_price", "ideal": "[{\"part_key\": 599, \"retail_price\": 1499.59}, {\"part_key\": 600, \"retail_price\": 1500.60}, {\"part_key\": 601, \"retail_price\": 1501.60}]", "sql": "WITH above_average_parts AS ( SELECT p_partkey, p_retailprice FROM part WHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part) ) SELECT p_partkey AS part_key, p_retailprice AS retail_price FROM above_average_parts order by part_key LIMIT 3;"}
