name: build_and_release

on:
  push:
    branches:
      - trunk
    tags:
      - v*
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'README.md'
      - 'Makefile'
      - 'CONTRIBUTING.md'
      - 'SECURITY.md'
      - 'LICENSE'
      - '.github/**'
      - 'version.txt'
      - '.schema/**'
      - '.vscode/**'
      - 'deploy/**'
      - 'install/**'
      - 'media/**'
      - 'monitoring/**'
      - 'acknowledgements.md'
      - 'Dockerfile*'

  workflow_dispatch:
    inputs:
      platform_option:
        description: "Which option do you want to run on? (Default is ALL)"
        required: false
        type: choice
        options:
          - "all"
          - "Linux x64"
          - "Linux aarch64"
          - "macOS aarch64 (Apple Silicon)"
          - "Windows x64"
          - "macOS x64 (Intel)"
        default: "all"

jobs:
  setup-matrix:
    name: Setup strategy matrix
    runs-on: spiceai-runners
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.result }}

    steps:
      - name: Set up matrix
        uses: actions/github-script@v7
        id: setup-matrix
        with:
          script: |
            const matrix = [
              {
                name: "Linux x64",
                runner: "spiceai-runners",
                target_os: "linux",
                target_arch: "x86_64",
                target_arch_go: "amd64",
                tags: ["default", "models"],
              }, {
                name: "Linux aarch64",
                runner: "hosted-linux-arm-runner",
                target_os: "linux",
                target_arch: "aarch64",
                target_arch_go: "arm64",
                tags: ["default", "models"],
              }, {
                name: "macOS aarch64 (Apple Silicon)",
                runner: "macos-14",
                target_os: "darwin",
                target_arch: "aarch64",
                target_arch_go: "arm64",
                tags: ["default", "models", "metal"],
              }, {
                name: "Windows x64",
                runner: "windows-latest",
                target_os: "windows",
                target_arch: "x86_64",
                target_arch_go: "amd64",
                tags: ["default", "models"],
              }
            ];

            // If running via workflow_dispatch, filter based on input
            if (context.eventName === 'workflow_dispatch') {
              const platform_option = context.payload.inputs.platform_option;

              if (platform_option === 'all') {
                return matrix;
              }

              return matrix.filter(m => m.name === platform_option);
            }

            return matrix;

  build:
    name: Build ${{ matrix.target.name }} binaries
    runs-on: ${{ matrix.target.runner }}
    needs: setup-matrix
    env:
      GOVER: 1.23.4
      GOOS: ${{ matrix.target.target_os }}
      GOARCH: ${{ matrix.target.target_arch_go }}

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set REL_VERSION from version.txt
        run: python3 ./.github/scripts/get_release_version.py

      - name: Install Visual Studio Build Tools
        if: matrix.target.target_os == 'windows'
        uses: ./.github/actions/install-vs-buildtools

      - name: Set up Go
        # CLI is only built on the same runners as the default spiced binary
        if: contains(matrix.target.tags, 'default')
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVER }}

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          os: ${{ matrix.target.target_os }}

      - name: Set up make
        if: matrix.target.target_os == 'linux'
        uses: ./.github/actions/setup-make
        with:
          os: ${{ matrix.target.target_os }}

      - name: Set up cc
        if: matrix.target.target_os == 'linux'
        uses: ./.github/actions/setup-cc

      # The aarch64 runner does not have any tools pre-installed
      - name: Install missing tools (Linux aarch64)
        if: matrix.target.target_os == 'linux' && matrix.target.target_arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libssl-dev pkg-config cmake protobuf-compiler unixodbc unixodbc-dev -y

      # The x86_64 runner does not unixodbc pre-installed
      - name: Install missing tools (Linux x86_64)
        if: matrix.target.target_os == 'linux' && matrix.target.target_arch == 'x86_64'
        run: |
          sudo apt-get install unixodbc unixodbc-dev -y

      - name: Install missing tools (Mac)
        if: matrix.target.target_os == 'darwin'
        run: |
          brew install protobuf
          brew install cmake
          brew install unixodbc
          echo "RUSTFLAGS=-L /opt/homebrew/lib" >> $GITHUB_ENV

      ## Default flavor
      - name: Build spiced
        if: contains(matrix.target.tags, 'default')
        working-directory: bin/spiced
        run: cargo build --release --features release  --target-dir ../../target

      - name: tar binary
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'default')
        run: |
          mv target/release/spiced spiced
          chmod +x spiced
          tar czf spiced_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz spiced

      - name: tar binary (Windows)
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'default')
        run: |
          mv target/release/spiced.exe spiced.exe
          tar czf spiced.exe_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz spiced.exe

      - name: Print version
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'default')
        run: ./spiced --version

      - name: Print version (Windows)
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'default')
        run: ./spiced.exe --version

      - uses: actions/upload-artifact@v4
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'default')
        with:
          name: spiced_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: spiced_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz

      - uses: actions/upload-artifact@v4
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'default')
        with:
          name: spiced.exe_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: spiced.exe_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz

      ## Models flavor
      - name: Build spiced (models)
        if: contains(matrix.target.tags, 'models')
        working-directory: bin/spiced
        run: cargo build --release --features release,models --target-dir ../../target

      - name: tar binary (models)
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'models')
        run: |
          mv target/release/spiced spiced
          chmod +x spiced
          tar czf spiced_models_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz spiced

      - name: tar binary (models) (Windows)
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'models')
        run: |
          rm spiced.exe
          mv target/release/spiced.exe spiced.exe
          tar czf spiced.exe_models_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz spiced.exe

      - name: Print version (models)
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'models')
        run: ./spiced --version

      - name: Print version (models) (Windows)
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'models')
        run: ./spiced.exe --version

      - uses: actions/upload-artifact@v4
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'models')
        with:
          name: spiced_models_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: spiced_models_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz

      - uses: actions/upload-artifact@v4
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'models')
        with:
          name: spiced.exe_models_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: spiced.exe_models_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz

      ## Models + metal flavor
      - name: Build spiced (models)
        if: matrix.target.target_os == 'darwin'
        working-directory: bin/spiced
        run: cargo build --release --features release,models,metal --target-dir ../../target

      - name: tar binary (models,metal)
        if: matrix.target.target_os == 'darwin'
        run: |
          mv target/release/spiced spiced
          chmod +x spiced
          tar czf spiced_models_metal_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz spiced

      - name: Print version (models,metal)
        if: matrix.target.target_os == 'darwin'
        run: ./spiced --version

      - uses: actions/upload-artifact@v4
        if: matrix.target.target_os == 'darwin'
        with:
          name: spiced_models_metal_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: spiced_models_metal_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz

      ## CLI build
      - name: Build spice
        if: contains(matrix.target.tags, 'default')
        run: make -C bin/spice

      - name: tar binary
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'default')
        run: |
          mv target/release/spice spice
          chmod +x spice
          tar czf spice_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz spice

      - name: tar binary (Windows)
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'default')
        run: |
          mv target/release/spice.exe spice.exe
          tar czf spice.exe_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz spice.exe

      - name: Print version
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'default')
        run: ./spice version

      - name: Print version (Windows)
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'default')
        run: ./spice.exe version

      - uses: actions/upload-artifact@v4
        if: matrix.target.target_os != 'windows' && contains(matrix.target.tags, 'default')
        with:
          name: spice_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: spice_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz

      - uses: actions/upload-artifact@v4
        if: matrix.target.target_os == 'windows' && contains(matrix.target.tags, 'default')
        with:
          name: spice.exe_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: spice.exe_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz

  publish-minio:
    name: Publish linux-x86_64 binaries to Minio
    runs-on: spiceai-runners
    needs: build
    env:
      GOVER: 1.23.4
      ARTIFACT_DIR: ./release
      MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      COMMIT_SHA: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # Don't fail if artifact not found. logic to check expected artifacts is done when
      # publishing (last step).
      - name: download artifacts - spice_linux_x86_64
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: spice_linux_x86_64
          path: ${{ env.ARTIFACT_DIR }}

      - name: download artifacts - spiced_linux_x86_64
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: spiced_linux_x86_64
          path: ${{ env.ARTIFACT_DIR }}

      - name: download artifacts - spiced_models_linux_x86_64
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: spiced_models_linux_x86_64
          path: ${{ env.ARTIFACT_DIR }}

      - name: Upload artifacts to Minio
        run: |
          sudo apt-get update
          sudo apt-get install wget -y
          sudo wget https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc
          sudo chmod +x /usr/local/bin/mc
          mc alias set spice-minio ${{ env.MINIO_ENDPOINT }} ${{ env.MINIO_ACCESS_KEY }} ${{ env.MINIO_SECRET_KEY }}

          if [ -f "${ARTIFACT_DIR}/spiced_linux_x86_64.tar.gz" ]; then
            mc cp ${{ env.ARTIFACT_DIR }}/spiced_linux_x86_64.tar.gz spice-minio/artifacts/spiced/linux-x86_64/${{ env.COMMIT_SHA }}/
          fi;

          if [ -f "${ARTIFACT_DIR}/spiced_models_linux_x86_64.tar.gz" ]; then
            mc cp ${{ env.ARTIFACT_DIR }}/spiced_models_linux_x86_64.tar.gz spice-minio/artifacts/spiced/linux-x86_64/${{ env.COMMIT_SHA }}/
          fi;

          if [ -f "${ARTIFACT_DIR}/spice_linux_x86_64.tar.gz" ]; then
            mc cp ${{ env.ARTIFACT_DIR }}/spice_linux_x86_64.tar.gz spice-minio/artifacts/spice/linux-x86_64/${{ env.COMMIT_SHA }}/
          fi;

  publish:
    name: Publish ${{ matrix.target_os }}-${{ matrix.target_arch }} binaries
    needs: build
    if: startswith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request'
    env:
      ARTIFACT_DIR: ./release

    strategy:
      matrix:
        include:
          - target_os: linux
            target_arch: x86_64
          - target_os: linux
            target_arch: aarch64
          - target_os: darwin
            target_arch: aarch64
          - target_os: windows
            target_arch: x86_64

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set REL_VERSION from version.txt
        run: python3 ./.github/scripts/get_release_version.py

      - name: download artifacts - spice_${{ matrix.target_os }}_${{ matrix.target_arch }}
        if: matrix.target_os != 'windows'
        uses: actions/download-artifact@v4
        with:
          name: spice_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: download artifacts - spice_${{ matrix.target_os }}_${{ matrix.target_arch }}
        if: matrix.target_os == 'windows'
        uses: actions/download-artifact@v4
        with:
          name: spice.exe_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: download artifacts - spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}
        if: matrix.target_os != 'windows'
        uses: actions/download-artifact@v4
        with:
          name: spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: download artifacts - spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}
        if: matrix.target_os == 'windows'
        uses: actions/download-artifact@v4
        with:
          name: spiced.exe_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: download artifacts - spiced_models_${{ matrix.target_os }}_${{ matrix.target_arch }}
        if: matrix.target_os != 'windows'
        uses: actions/download-artifact@v4
        with:
          name: spiced_models_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: download artifacts - spiced_models_${{ matrix.target_os }}_${{ matrix.target_arch }}
        if: matrix.target_os == 'windows'
        uses: actions/download-artifact@v4
        with:
          name: spiced.exe_models_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}
      
      # macOS metal 
      - name: download artifacts - spiced_models_metal_${{ matrix.target_os }}_${{ matrix.target_arch }}
        if: matrix.target_os == 'darwin'
        uses: actions/download-artifact@v4
        with:
          name: spiced_models_metal_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: lists artifacts
        run: ls -l ${{ env.ARTIFACT_DIR }}

      - name: publish ${{ matrix.target_os }}/${{ matrix.target_arch }} binaries to github
        run: |
          # Parse repository to get owner and repo names
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          # Get the list of files
          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)
          # Delete existing release artifact
          python ./.github/scripts/github_release.py delete \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "v${{ env.REL_VERSION }}" \
            ${RELEASE_ARTIFACT[*]}
          if [ "$LATEST_RELEASE" = "true" ]; then
            export RELEASE_BODY=`cat ./docs/release_notes/v${{ env.REL_VERSION }}.md`
          else
            export RELEASE_BODY="This is the release candidate ${{ env.REL_VERSION }}"
          fi
          echo "Uploading Spice.ai Binaries to GitHub Release"
          python ./.github/scripts/github_release.py upload \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "v${{ env.REL_VERSION }}" \
            --release-name "v${{ env.REL_VERSION }}" \
            --body "${RELEASE_BODY}" \
            --prerelease "$PRE_RELEASE" \
            ${RELEASE_ARTIFACT[*]}
