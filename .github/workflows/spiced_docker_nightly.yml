name: spiced_docker_nightly

on:
  schedule:
    - cron: "0 9 * * *" # Runs the workflow at 9:00 AM UTC (1AM PT) every day

  workflow_dispatch:
    inputs:
      publish:
        description: Publish the Docker images to the registry
        required: false
        type: boolean
        default: false

jobs:
  check_commits:
    runs-on: ubuntu-latest
    outputs:
      has_new_commits: ${{ steps.check_commits.outputs.has_new_commits }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check new commits since latest nightly build
        id: check_commits
        run: |
          # Get the latest commit hash from the default branch
          latest_commit=$(git rev-parse HEAD)

          # Attempt to get the commit hash of the current nightly tag
          nightly_commit=$(git rev-list -n 1 nightly 2>/dev/null || echo "")

          # Check if there are new commits since the last nightly tag
          if [ "$latest_commit" = "$nightly_commit" ]; then
            echo "No new commits since the last nightly build. Exiting..."
            echo "has_new_commits=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "New commits found. Proceeding with the build."
          echo "has_new_commits=true" >> $GITHUB_OUTPUT
        shell: bash

  setup:
    needs: check_commits
    if: needs.check_commits.outputs.has_new_commits == 'true'

    runs-on: ubuntu-latest
    outputs:
      rel_version: ${{ steps.set_version.outputs.rel_version }}
      nightly_label: ${{ steps.set_version.outputs.nightly_label }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Nightly REL_VERSION from current timestamp
        run: python3 ./.github/scripts/get_release_version.py

      - name: Add REL_VERSION to output
        id: set_version
        run: |
          commit_hash=$(git rev-parse --short HEAD)
          date="$(date +%Y%m%d)"
          version="${date}-${commit_hash}"
          nightly_label="nightly.${date}.${commit_hash}"
          echo "rel_version=${version}" >> $GITHUB_OUTPUT
          echo "nightly_label=${nightly_label}" >> $GITHUB_OUTPUT
          echo "Preparing to publish nightly build with version: \"${version}\""

  build-arm64:
    needs: [check_commits, setup]
    if: needs.check_commits.outputs.has_new_commits == 'true'

    runs-on: hosted-linux-arm-runner

    steps:
      - uses: actions/checkout@v4

      - name: Add nightly postfix to version in Cargo.toml
        env:
          NIGHTLY_LABEL: ${{ needs.setup.outputs.nightly_label }}
        run: |
          current_version=$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          if [[ "$current_version" =~ -[a-zA-Z0-9]+(\.[0-9]+)*$ ]]; then
            new_version="${current_version}.$NIGHTLY_LABEL"
          else
            new_version="${current_version}-$NIGHTLY_LABEL"
          fi
          sed -i "s/^version = \".*\"/version = \"${new_version}\"/" Cargo.toml
          grep '^version =' Cargo.toml

      - name: Install docker
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$(lsb_release -i | awk '{ print tolower($3) }') $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Start Docker service
        run: |
          sudo systemctl start docker
          sudo systemctl status docker

      - name: chown /var/run/docker.sock to current user
        run: |
          sudo chown $USER /var/run/docker.sock

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Build ARM64 models image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          outputs: type=docker,name=localhost:5000/spiceai:models-arm64,dest=/tmp/image-arm64-models.tar
          cache-from: type=gha,scope=build-arm64
          cache-to: type=gha,scope=build-arm64,mode=max
          build-args: |
            REL_VERSION=${{ needs.setup.outputs.rel_version }}
            CARGO_FEATURES=release,models

      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-arm64
          path: /tmp/image-arm64-*.tar

  build-amd64:
    needs: [check_commits, setup]
    if: needs.check_commits.outputs.has_new_commits == 'true'

    runs-on: spiceai-runners
    steps:
      - uses: actions/checkout@v4

      - name: Add nightly postfix to version in Cargo.toml
        env:
          NIGHTLY_LABEL: ${{ needs.setup.outputs.nightly_label }}
        run: |
          current_version=$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          if [[ "$current_version" =~ -[a-zA-Z0-9]+(\.[0-9]+)*$ ]]; then
            new_version="${current_version}.$NIGHTLY_LABEL"
          else
            new_version="${current_version}-$NIGHTLY_LABEL"
          fi
          sed -i "s/^version = \".*\"/version = \"${new_version}\"/" Cargo.toml
          grep '^version =' Cargo.toml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Enable docker driver for layer caching
          driver-opts: |
            image=moby/buildkit:latest

      - name: Build AMD64 models image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          outputs: type=docker,name=localhost:5000/spiceai:models-amd64,dest=/tmp/image-amd64-models.tar
          cache-from: type=gha,scope=build-amd64
          cache-to: type=gha,scope=build-amd64,mode=max
          build-args: |
            REL_VERSION=${{ needs.setup.outputs.rel_version }}
            CARGO_FEATURES=release,models

      - name: Upload AMD64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-amd64
          path: /tmp/image-amd64-*.tar

  publish:
    needs: [check_commits, setup, build-amd64, build-arm64]
    if: needs.check_commits.outputs.has_new_commits == 'true' && (github.event_name == 'schedule' || inputs.publish)

    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp
          pattern: images-*

      - name: Verify artifacts
        run: |
          ls -l /tmp
          ls -l /tmp/images-amd64
          ls -l /tmp/images-arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start local registry
        run: |
          docker run -d -p 5000:5000 --restart=always --name registry registry:2

      - name: Login to GitHub Package Registry
        if: github.event_name == 'schedule' || inputs.publish
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Import images and create manifests
        env:
          REL_VERSION: ${{ needs.setup.outputs.rel_version }}
          PUBLISH: ${{ github.event_name == 'schedule' || inputs.publish }}
        run: |
          echo "REL_VERSION=${REL_VERSION}"
          echo "PUBLISH=${PUBLISH}"
          variants=("models") # we might need to include other variants in future
          for variant in "${variants[@]}"; do
            suffix=""
            if [ "$variant" != "default" ]; then
              suffix="-${variant}"
            fi

            # Load both architecture images
            echo "Loading AMD64 image"
            docker load -i /tmp/images-amd64/image-amd64-${variant}.tar
            echo "Loading ARM64 image"
            docker load -i /tmp/images-arm64/image-arm64-${variant}.tar

            # Push images to local registry
            echo "Pushing images to local registry"
            docker push localhost:5000/spiceai:${variant}-amd64
            docker push localhost:5000/spiceai:${variant}-arm64

            if [[ "${PUBLISH}" == "true" ]]; then
              # Push to GitHub Container Registry
              echo "Pushing to GHCR"
              docker buildx imagetools create \
                -t ghcr.io/spiceai/spiceai-nightly:${REL_VERSION}${suffix} \
                -t ghcr.io/spiceai/spiceai-nightly:latest${suffix} \
                localhost:5000/spiceai:${variant}-amd64 \
                localhost:5000/spiceai:${variant}-arm64

              echo "Verifying GHCR image:"
              docker buildx imagetools inspect ghcr.io/spiceai/spiceai-nightly:${REL_VERSION}${suffix}
            else
              echo "Skipping push for non-tag build"
              echo "Creating local manifest for testing:"
              docker buildx imagetools create \
                -t localhost:5000/spiceai:latest${suffix} \
                localhost:5000/spiceai:${variant}-amd64 \
                localhost:5000/spiceai:${variant}-arm64

              docker buildx imagetools inspect localhost:5000/spiceai:latest${suffix}
            fi
          done

      - uses: actions/checkout@v4
        if: github.event_name == 'schedule' || inputs.publish
        with:
          fetch-depth: 0

      - name: Update nightly tag
        if: github.event_name == 'schedule' || inputs.publish
        run: |
          git tag -f nightly
          git push origin nightly --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
