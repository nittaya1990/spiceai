[package]
description = "The spiced runtime"
edition.workspace = true
homepage.workspace = true
license.workspace = true
name = "runtime"
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[dependencies]
app = { path = "../app" }
arrow.workspace = true
arrow-csv = "53.3.0"
arrow-flight = { workspace = true, features = ["flight-sql-experimental"] }
arrow-ipc.workspace = true
arrow-json.workspace = true
arrow-schema = { workspace = true, features = ["serde"] }
arrow_sql_gen = { path = "../arrow_sql_gen" }
arrow_tools = { path = "../arrow_tools" }
async-openai.workspace = true
async-stream.workspace = true
async-trait.workspace = true
aws-config = { version = "1.1.10", optional = true }
aws-sdk-dynamodb = { version = "1", optional = true }
aws-sdk-secretsmanager = { version = "1", optional = true }
aws-sdk-sts = { version = "1", optional = true }
axum.workspace = true
axum-extra = { version = "0.9.6", features = ["typed-header"] }
base64.workspace = true
bytes.workspace = true
cache = { path = "../cache" }
chrono = { version = "0.4.38" }
clap.workspace = true
clickhouse-rs = { workspace = true, optional = true }
csv = "1.3.0"
dashmap = "6.1.0"
data_components = { path = "../data_components" }
datafusion.workspace = true
datafusion-federation = { workspace = true }
datafusion-federation-sql = { workspace = true }
datafusion-functions-json = { workspace = true }
datafusion-table-providers = { workspace = true }
db_connection_pool = { path = "../db_connection_pool" }
document_parse = { path = "../document_parse" }
dotenvy.workspace = true
duckdb = { workspace = true, features = [
    "bundled",
    "r2d2",
    "vtab",
    "vtab-arrow",
], optional = true }
flight_client = { path = "../flight_client" }
fundu = { workspace = true }
futures.workspace = true
globset.workspace = true
governor = "0.8.0"
graph-rs-sdk = { workspace = true, optional = true }
graphql-parser.workspace = true
headers-accept = "0.1.3"
http.workspace = true
http-body-util = "0.1.2"
hyper = "1.6.0"
hyper-util = { version = "0.1.6", features = ["service"] }
iceberg.workspace = true
iceberg-catalog-rest.workspace = true
imap = { workspace = true, optional = true }
indexmap.workspace = true
itertools.workspace = true
jsonwebtoken = "9.3.0"
keyring = { version = "3.6.1", features = [
    "apple-native",
    "windows-native",
    "linux-native",
], optional = true }
llms = { path = "../llms" }
logos = "0.15.0"
mcp-client = { git = "https://github.com/block/goose", package = "mcp-client", optional = true }
mcp-core = { git = "https://github.com/block/goose", package = "mcp-core", optional = true }
mediatype = "0.19.18"
model_components = { path = "../model_components" }
mysql_async = { workspace = true, optional = true }
notify = "7.0.0"
ns_lookup = { path = "../ns_lookup" }
object_store = { workspace = true, features = ["aws", "http", "azure"] }
once_cell = "1.19.0"
opentelemetry.workspace = true
opentelemetry-prometheus.workspace = true
opentelemetry-proto = { version = "0.27", features = [
    "gen-tonic-messages",
    "gen-tonic",
    "metrics",
] }
opentelemetry_sdk.workspace = true
otel-arrow = { path = "../otel-arrow" }
package = { path = "../package" }
percent-encoding.workspace = true
pin-project.workspace = true
prometheus.workspace = true
prometheus-parse = "0.2.5"
prost = { version = "0.13.1", default-features = false, features = [
    "prost-derive",
] }
rand = "0.8.5"
regex.workspace = true
reqwest.workspace = true
runtime-auth = { path = "../runtime-auth" }
rusqlite = { workspace = true, optional = true }
rustls.workspace = true
rustls-pemfile.workspace = true
schemars = "0.8.19"
secrecy.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
snafu.workspace = true
snowflake-api = { workspace = true, optional = true }
spicepod = { path = "../spicepod" }
ssh2 = { workspace = true, optional = true }
suppaftp = { workspace = true, optional = true }
telemetry = { path = "../telemetry" }
tiberius = { workspace = true, optional = true }
tokio.workspace = true
tokio-rusqlite = { workspace = true, optional = true }
tokio-rustls = "0.26.0"
tokio-stream.workspace = true
tokio-util = { workspace = true, optional = true }
tonic.workspace = true
tonic-health.workspace = true
tower.workspace = true
tower-http.workspace = true
tracing.workspace = true
tracing-futures.workspace = true
tract-core = "0.21.0"
url = "2.5.4"
util = { path = "../util" }
utoipa = { version = "5", features = ["axum_extras"], optional = true }
utoipa-swagger-ui = { version = "8", features = ["axum"], optional = true }

uuid = { workspace = true, features = ["v7"] }
x509-certificate.workspace = true

[dev-dependencies]
anyhow = "1.0.86"
async-graphql = "7.0.5"
async-graphql-axum = "=7.0.13"
azure_core = "0.21.0"
azure_storage = "0.21.0"
azure_storage_blobs = "0.21.0"
bollard = "0.18.1"
dirs = "5.0.1"
flightrepl = { path = "../flightrepl" }
hf-hub = { workspace = true }
insta.workspace = true
jsonpath-rust = "0.7.3"
opentelemetry_sdk = { workspace = true, features = ["rt-tokio-current-thread"] }
paste.workspace = true
scopeguard = "1.2.0"
serde_json = { workspace = true, features = ["preserve_order"] }
spice-cloud = { path = "../spice_cloud" }
test-framework = { path = "../test-framework" }
tokio = { workspace = true, features = ["time", "test-util"] }
tracing-opentelemetry.workspace = true
tracing-subscriber.workspace = true

[features]
aws-secrets-manager = [
    "dep:aws-config",
    "dep:aws-sdk-secretsmanager",
    "dep:aws-sdk-sts",
]
clickhouse = [
    "dep:clickhouse-rs",
    "db_connection_pool/clickhouse",
    "arrow_sql_gen/clickhouse",
    "data_components/clickhouse",
]
cuda = ["llms/cuda"]
databricks = ["data_components/databricks"]
debezium = ["data_components/debezium"]
default = ["keyring-secret-store", "aws-secrets-manager", "sharepoint"]
delta_lake = ["data_components/delta_lake"]
dev = ["openapi", "otel-arrow/dev", "mcp"]
dremio = []
duckdb = ["dep:duckdb", "db_connection_pool/duckdb", "data_components/duckdb"]
dynamodb = ["dep:aws-sdk-dynamodb", "data_components/dynamodb"]
flightsql = ["data_components/flightsql"]
ftp = ["dep:suppaftp", "dep:ssh2"]
imap = ["data_components/imap", "dep:imap"]
keyring-secret-store = ["dep:keyring"]
mcp = ["dep:mcp-client", "dep:mcp-core"]
metal = ["llms/metal"]
models = ["model_components/full"]
mssql = ["dep:tiberius", "dep:tokio-util", "data_components/mssql"]
mysql = ["dep:mysql_async", "db_connection_pool/mysql", "data_components/mysql"]
odbc = ["db_connection_pool/odbc", "data_components/odbc"]
openapi = ["dep:utoipa-swagger-ui", "dep:utoipa"]
postgres = [
    "db_connection_pool/postgres",
    "data_components/postgres",
    "datafusion-table-providers/postgres",
]
postgres-write = []
sharepoint = ["data_components/sharepoint", "dep:graph-rs-sdk"]
snowflake = [
    "dep:snowflake-api",
    "db_connection_pool/snowflake",
    "data_components/snowflake",
]
spark = ["data_components/spark_connect"]
sqlite = [
    "dep:tokio-rusqlite",
    "db_connection_pool/sqlite",
    "data_components/sqlite",
    "dep:rusqlite",
]

[[bench]]
harness = false
name = "bench"

[[bench]]
harness = false
name = "vector_search"

[target.'cfg(windows)'.dependencies]
winver = "1.0.0"
